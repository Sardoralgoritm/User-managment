@model List<User>
@{
    ViewData["Title"] = "User Management";
}

@section Styles {
    <title>User Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .table th, .table td {
            vertical-align: middle;
        }

        .user-name {
            font-weight: 500;
            margin-bottom: 0;
        }

        .user-position {
            font-size: 0.875rem;
            color: #6c757d;
            margin: 0;
        }

        .checkbox-column {
            width: 50px;
            text-align: center;
        }

        .status-column {
            text-align: center;
        }

        .last-seen-column {
            text-align: right;
            font-size: 0.875rem;
            cursor: pointer;
        }

        .toolbar {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
    </style>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="h3 mb-4 mt-3">User Management</h1>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show">
                    <i class="fas fa-check-circle me-2"></i>
                    @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
        </div>
    </div>

    <!-- Main Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <!-- Toolbar -->
                <div class="card-header toolbar p-3">
                    <form asp-action="BulkAction" method="post" id="bulkActionForm">
                        <input type="hidden" name="selectedIds" id="selectedIdsInput" />
                        <input type="hidden" name="action" id="actionInput" />

                        <div class="row align-items-center">
                            <div class="col-auto">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline-secondary" id="blockBtn" disabled
                                            data-bs-toggle="tooltip" title="Block selected users">
                                        <i class="fas fa-ban me-1"></i> Block
                                    </button>

                                    <button type="button" class="btn btn-outline-success" id="unblockBtn" disabled
                                            data-bs-toggle="tooltip" title="Unblock selected users">
                                        <i class="fas fa-unlock"></i>
                                    </button>

                                    <button type="button" class="btn btn-outline-danger" id="deleteBtn" disabled
                                            data-bs-toggle="tooltip" title="Delete selected users">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="col-auto">
                                <button type="button" class="btn btn-outline-warning" id="deleteUnverifiedBtn"
                                        data-bs-toggle="tooltip" title="Delete all unverified users">
                                    <i class="fas fa-user-times"></i>
                                </button>
                            </div>

                            <div class="col">
                                <small class="text-muted ms-3" id="selectionInfo">0 users selected</small>
                            </div>

                            <div class="col-auto ms-auto">
                                <input type="text" class="form-control form-control-sm" placeholder="Filter" id="filterInput">
                            </div>
                        </div>
                    </form>
                </div>

                <!-- Table -->
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="checkbox-column">
                                    <input class="form-check-input" type="checkbox" id="selectAll">
                                </th>
                                <th>Name</th>
                                <th>Email</th>
                                <th class="status-column">Status</th>
                                <th class="last-seen-column">Last seen</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Model)
                            {
                                <tr data-user-id="@user.Id">
                                    <td class="checkbox-column">
                                        <input class="form-check-input user-checkbox" type="checkbox" value="@user.Id">
                                    </td>
                                    <td>
                                        <div class="user-name">@user.Name</div>
                                        <div class="user-position">@user.Position</div>
                                    </td>
                                    <td>@user.Email</td>
                                    <td class="status-column">
                                        @switch (user.Status)
                                        {
                                            case Status.Active:
                                                <span class="badge bg-success">Active</span>
                                                break;
                                            case Status.Blocked:
                                                <span class="badge bg-danger">Blocked</span>
                                                break;
                                            case Status.Unverified:
                                                <span class="badge bg-warning text-dark">Unverified</span>
                                                break;
                                        }
                                    </td>
                                    <td class="last-seen-column"
                                        data-bs-toggle="tooltip"
                                        data-bs-placement="right"
                                        title="@(user.LastLogInTime == DateTime.MinValue ? "Never logged in" : user.LastLogInTime.ToString("MMM dd, yyyy 'at' HH:mm"))">
                                        @{
                                            string timeAgo;
                                            if (user.LastLogInTime == DateTime.MinValue)
                                            {
                                                timeAgo = "Never";
                                            }
                                            else
                                            {
                                                var diff = DateTime.UtcNow - user.LastLogInTime;

                                                if (diff.TotalMinutes < 1)
                                                    timeAgo = "Less than a minute ago";
                                                else if (diff.TotalMinutes < 60)
                                                    timeAgo = $"{(int)diff.TotalMinutes} minute{((int)diff.TotalMinutes > 1 ? "s" : "")} ago";
                                                else if (diff.TotalHours < 24)
                                                    timeAgo = $"{(int)diff.TotalHours} hour{((int)diff.TotalHours > 1 ? "s" : "")} ago";
                                                else if (diff.TotalDays < 7)
                                                    timeAgo = $"{(int)diff.TotalDays} day{((int)diff.TotalDays > 1 ? "s" : "")} ago";
                                                else if (diff.TotalDays < 30)
                                                    timeAgo = $"{(int)(diff.TotalDays / 7)} week{((int)(diff.TotalDays / 7) > 1 ? "s" : "")} ago";
                                                else if (diff.TotalDays < 365)
                                                    timeAgo = $"{(int)(diff.TotalDays / 30)} month{((int)(diff.TotalDays / 30) > 1 ? "s" : "")} ago";
                                                else
                                                    timeAgo = $"{(int)(diff.TotalDays / 365)} year{((int)(diff.TotalDays / 365) > 1 ? "s" : "")} ago";
                                            }
                                        }
                                        @timeAgo
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalTitle">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="confirmModalBody"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmActionBtn">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var tooltips = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
                .map(el => new bootstrap.Tooltip(el));

            const selectAllCheckbox = document.getElementById('selectAll');
            const userCheckboxes = document.querySelectorAll('.user-checkbox');
            const blockBtn = document.getElementById('blockBtn');
            const unblockBtn = document.getElementById('unblockBtn');
            const deleteBtn = document.getElementById('deleteBtn');
            const deleteUnverifiedBtn = document.getElementById('deleteUnverifiedBtn');
            const selectionInfo = document.getElementById('selectionInfo');
            const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));
            const bulkForm = document.getElementById('bulkActionForm');

            function getUniqIdValue() {
                return 'id_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
            }

            function updateToolbarState() {
                const checkedBoxes = document.querySelectorAll('.user-checkbox:checked');
                const selectedCount = checkedBoxes.length;

                selectionInfo.textContent = selectedCount === 0
                    ? '0 users selected'
                    : `${selectedCount} user${selectedCount > 1 ? 's' : ''} selected`;

                const hasSelection = selectedCount > 0;
                blockBtn.disabled = unblockBtn.disabled = deleteBtn.disabled = !hasSelection;

                // Update select all state
                if (selectedCount === 0) {
                    selectAllCheckbox.indeterminate = selectAllCheckbox.checked = false;
                } else if (selectedCount === userCheckboxes.length) {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = true;
                } else {
                    selectAllCheckbox.indeterminate = true;
                }
            }

            function showConfirmation(title, message, action) {
                document.getElementById('confirmModalTitle').textContent = title;
                document.getElementById('confirmModalBody').textContent = message;

                document.getElementById('confirmActionBtn').onclick = function() {
                    confirmModal.hide();
                    submitBulkAction(action);
                };

                confirmModal.show();
            }

            function getSelectedUserIds() {
                return Array.from(document.querySelectorAll('.user-checkbox:checked')).map(cb => cb.value);
            }

            function submitBulkAction(action) {
                const selectedIds = getSelectedUserIds();
                document.getElementById('selectedIdsInput').value = selectedIds.join(',');
                document.getElementById('actionInput').value = action;
                bulkForm.submit();
            }

            selectAllCheckbox.addEventListener('change', function() {
                userCheckboxes.forEach(cb => cb.checked = this.checked);
                updateToolbarState();
            });

            userCheckboxes.forEach(cb => cb.addEventListener('change', updateToolbarState));

            blockBtn.addEventListener('click', function() {
                const count = getSelectedUserIds().length;
                showConfirmation('Block Users', `Block ${count} user(s)?`, 'block');
            });

            unblockBtn.addEventListener('click', function() {
                const count = getSelectedUserIds().length;
                showConfirmation('Unblock Users', `Unblock ${count} user(s)?`, 'unblock');
            });

            deleteBtn.addEventListener('click', function() {
                const count = getSelectedUserIds().length;
                showConfirmation('Delete Users', `Permanently delete ${count} user(s)? This cannot be undone.`, 'delete');
            });

            deleteUnverifiedBtn.addEventListener('click', function() {
                showConfirmation('Delete Unverified', 'Delete ALL unverified users? This cannot be undone.', 'delete-unverified');
            });

            updateToolbarState();
        });
    </script>
}